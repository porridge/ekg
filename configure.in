dnl $Id$

AC_INIT(lib/libgadu.h)
AC_PREREQ(2.50)
AC_CONFIG_HEADERS(config.h)

AC_SUBST(CFLAGS_LIBGADU)
AC_SUBST(LIBS_LIBGADU)
AC_SUBST(OBJS)
AC_SUBST(IOCTLD_OBJS)
AC_SUBST(PC_REQUIRES)

AC_SUBST(strip_ekg, "")
AC_SUBST(strip_ioctld, "")
AC_SUBST(strip_libgadu_so, "")

AC_SUBST(ioctld, "")
AC_SUBST(install_ioctld, "")

AC_SUBST(shared, "")
AC_SUBST(install_shared, "")

AC_SUBST(lgadu, "")
AC_SUBST(libgadu_a, "")

AC_SUBST(static, "static")
AC_SUBST(install_static, "install-static")

AC_SUBST(ekg, "")
AC_SUBST(install_ekg, "")
AC_SUBST(clean_ekg, "")
AC_SUBST(distclean_ekg, "")
AC_SUBST(uninstall_ekg, "")
AC_SUBST(dep_ekg, "")

AC_SUBST(make_ekgwap, "")
AC_SUBST(install_ekgwap, "")

dnl
dnl  Zaczynamy testy...
dnl

AC_PROG_CC

if test "$GCC"; then 
	CFLAGS="$CFLAGS -Wall"
	CFLAGS_LIBGADU="$CFLAGS_LIBGADU -Wall"
dnl	echo "Whoa!, GNU CC, -Wall"
fi

AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_LN_S
AC_C_CONST

AC_PATH_PROG(GMAKE, gmake, no)

if test "x$GMAKE" = "xno"; then
	AC_PATH_PROG(MAKE, make, no)

	if test "x$MAKE" = "xno"; then
		AC_MSG_ERROR([make ])
	fi
else
	MAKE="$GMAKE"
fi

AC_CHECK_TOOL(AR, ar, no)

if test "x$AR" = "xno"; then
	AC_MSG_ERROR([ar ])
fi

AC_CHECK_TOOL(STRIP, strip, :)

dnl
dnl  Tworzymy osobny plik lib/libgadu-config.h niezale¿ny od autoconfa
dnl  z w³asn± przestrzeni± nazw (__GG_LIBGADU), ¿eby móc go spokojnie
dnl  w³±czyæ w <libgadu.h>
dnl

AC_DEFUN([AC_LIBGADU_DEFINE],
[
	sed 's/#undef __GG_LIBGADU_$1/#define __GG_LIBGADU_$1/' < lib/libgadu-config.h > lib/libgadu-config.h-
	mv -f lib/libgadu-config.h- lib/libgadu-config.h
])

AC_DEFUN([AC_LIBGADU_UNDEF],
[
	sed 's/#undef __GG_LIBGADU_$1.*/\/* & *\//' < lib/libgadu-config.h > lib/libgadu-config.h-
	mv -f lib/libgadu-config.h- lib/libgadu-config.h
])

echo "/* Generated automatically by configure. Do not edit. */" > lib/libgadu-config.h
cat lib/libgadu-config.h.in >> lib/libgadu-config.h

dnl
dnl  Najpierw sprawdzamy te opcje, które s± wspólne dla libgadu i ekg.
dnl

AC_C_BIGENDIAN

if test "x$ac_cv_c_bigendian" = "xyes"; then
	AC_LIBGADU_DEFINE([BIGENDIAN])
fi

AC_NEED_STDINT_H

if test "x$STDINT_H" = "x"; then
	cp stdint.h lib/libgadu-stdint.h
	STDINT_H=libgadu-stdint.h 
fi

sed "s/#include <stdint.h>/#include <$STDINT_H>/" < lib/libgadu-config.h > lib/libgadu-config.h-
mv -f lib/libgadu-config.h- lib/libgadu-config.h

dnl SunOS
AC_CHECK_LIB(nsl, t_accept, LIBS="$LIBS -lnsl")
AC_CHECK_LIB(socket, socket, LIBS="$LIBS -lsocket")

dnl BeOS

AC_ARG_WITH(bind,
  [  --without-bind          Disable linking with libbind when found])

if test "x$with_bind" != "xno"; then
	AC_CHECK_LIB(bind, __inet_addr, LIBS="$LIBS -lbind")
fi

dnl threadsafe
AC_CHECK_FUNCS([gethostbyname_r], [AC_LIBGADU_DEFINE([HAVE_GETHOSTBYNAME_R])])

dnl inet_pton
AC_CHECK_FUNCS(inet_pton)

AC_MSG_CHECKING([for va_copy])
AC_TRY_LINK([#include <stdarg.h>], [va_list a, b; va_copy(a, b);], 
[
	AC_MSG_RESULT([yes])
	AC_LIBGADU_DEFINE([HAVE_VA_COPY])
], [
	AC_MSG_RESULT([no])
])

AC_MSG_CHECKING([for __va_copy])
AC_TRY_LINK([#include <stdarg.h>], [va_list a, b; __va_copy(a, b);], 
[
	AC_MSG_RESULT([yes])
	AC_LIBGADU_DEFINE([HAVE___VA_COPY])
], [
	AC_MSG_RESULT([no])
])

AC_ARG_ENABLE(debug, 
	[  --disable-debug         Compile without debugging support])

if test "x$enable_debug" = "xno"; then
	AC_MSG_WARN([--disable-debug is obsolete.])
fi

dnl if test "x$enable_debug" = "xno"; then 
dnl 	CFLAGS="$CFLAGS -DGG_DEBUG_DISABLE"
dnl 	CFLAGS_LIBGADU="$CFLAGS_LIBGADU -DGG_DEBUG_DISABLE"
dnl 	strip_ekg="strip-ekg"
dnl 	strip_ioctld="strip-ioctld"
dnl 	strip_libgadu_so="strip-libgadu-so"
dnl else
dnl 	CFLAGS="$CFLAGS -g" 
dnl fi

dnl 
dnl  Jak± wersjê libgadu kompilujemy?
dnl

AC_ARG_ENABLE(shared,
	[  --enable-shared         Compile shared version of libgadu])

lib_shared_enabled=no
  
if test "x$enable_shared" = "xyes"; then
	shared="shared"
	install_shared="install-shared"
	lib_shared_enabled=yes
fi

AC_ARG_ENABLE(static,
	[  --disable-static        Don't compile static version of libgadu

Optional ekg Features:])

lib_static_enabled=yes

if test "x$enable_static" = "xno"; then
	static=""
	install_static=""
	lib_static_enabled=no
fi

if test "x$enable_static" = "xno" -a "x$enable_shared" != "xyes"; then
  AC_MSG_ERROR([You must choose either static or shared version of libgadu.])
fi

AC_ARG_ENABLE(dynamic,
  [  --enable-dynamic        Link ekg dynamically with libgadu])

dnl
dnl  Sprawd¼my, jak± wersjê vsnprintf() dostajemy. Dodatkowa opcja jest
dnl  dla crosskompilacji, bo nie mo¿na wtedy korzystaæ z AC_TRY_RUN().
dnl

AC_ARG_WITH(c99-vsnprintf,
  [  --with-c99-vsnprintf    Target system has C99-compatible vsnprintf()])

if test "x$with_c99_vsnprintf" = "xyes"; then
	AC_LIBGADU_DEFINE([HAVE_C99_VSNPRINTF])
fi

if test "x$with_c99_vsnprintf" = "x"; then
	AC_MSG_CHECKING([for C99-compatible vsnprintf()])
	AC_TRY_RUN(
	[
		#include <stdio.h>
		int main()
		{
			char tmp;
			return (snprintf(&tmp, sizeof(tmp), "test") != 4);
		}
	], [
		AC_MSG_RESULT([yes])
		AC_LIBGADU_DEFINE([HAVE_C99_VSNPRINTF])
	], [
		AC_MSG_RESULT([no])
	])
fi

dnl
dnl  Resolver libgadu oparty na pthread
dnl

AC_ARG_WITH(pthread,
  [  --with-pthread          Use pthread in resolver])

if test "x$with_pthread" = "xyes"; then
	dnl najpierw sprawdzamy czy pomijac testy pthreads/shared
	pthreads_shared_skip=0
	if test "x$lib_shared_enabled" = "xno"; then
		pthreads_shared_skip=1
	fi
	ACX_PTHREAD(
	[
	 	dnl workaround dla pkconfiga
		if test "x$PTHREAD_CFLAGS" = "x-pthread"; then
			PTHREAD_LIBS="$PTHREAD_LIBS -pthread"
		fi

		LIBS="$PTHREAD_LIBS $LIBS"
		CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
		CFLAGS_LIBGADU="$CFLAGS_LIBGADU $PTHREAD_CFLAGS"
		CC="$PTHREAD_CC"
		have_pthread=yes

		AC_LIBGADU_DEFINE([HAVE_PTHREAD])
	], [
		AC_MSG_ERROR([Your system is not supporting pthreads])
	], [$pthreads_shared_skip])
fi

dnl
dnl  Sprawdzamy, czy jest ,,long long'' na potrzeby obliczeñ czasów DCC
dnl

AC_MSG_CHECKING([for long long])

AC_TRY_COMPILE([],
[
	long long a = 1LL;
	unsigned long long b = 1LL;
], [
	AC_MSG_RESULT([yes])
	AC_LIBGADU_DEFINE([HAVE_LONG_LONG])
])

dnl
dnl  Sprawdzamy OpenSSL
dnl

AC_CHECK_OPENSSL
  
AC_ARG_ENABLE(libgadu-openssl,
	[  --enable-libgadu-openssl Enable LIBGADU OpenSSL support])

if test "x$have_openssl" = "xyes"; then
	OBJS="$OBJS simlite.o"
	LDFLAGS="$OPENSSL_LIBS $LDFLAGS"
	CFLAGS="$CFLAGS $OPENSSL_INCLUDES"
	if test "x$enable_libgadu_openssl" != "xno"; then
		LIBS_LIBGADU="$LIBS_LIBGADU $OPENSSL_LIBS"
		CFLAGS_LIBGADU="$CFLAGS_LIBGADU $OPENSSL_INCLUDES"
		PC_REQUIRES="$PC_REQUIRES openssl"
		AC_LIBGADU_DEFINE([HAVE_OPENSSL])
	fi
fi

dnl
dnl  Zachowujemy opcje dla libgadu
dnl

LIBS_LIBGADU="$LIBS_LIBGADU $LIBS"

dnl <ekg>
dnl
dnl  I zaczynamy wykrywaæ ¶mieci dla ekg...
dnl

dnl  dirname - get rid of libgen
AC_CHECK_HEADERS(libgen.h)
AC_CHECK_FUNC(dirname, , [OBJS="$OBJS ../compat/dirname.o"])

dnl  sprawdzamy, czy system ma getopt_long
AC_CHECK_FUNC(getopt_long, , [OBJS="$OBJS ../compat/getopt.o ../compat/getopt1.o"; CFLAGS="-I../compat $CFLAGS"])

dnl  na SunOSach nie ma scandir()
AC_CHECK_FUNCS(scandir, , [OBJS="$OBJS ../compat/scandir.o"])

dnl  setenv dla pythona
AC_CHECK_FUNCS(setenv)

dnl  strlcat/strlcpy wiele systemów nie posiada
AC_CHECK_FUNCS(strlcat, , [OBJS="$OBJS ../compat/strlcat.o"; IOCTLD_OBJS="$IOCTLD_OBJS ../compat/strlcat.o"])
AC_CHECK_FUNCS(strlcpy, , [OBJS="$OBJS ../compat/strlcpy.o"; IOCTLD_OBJS="$IOCTLD_OBJS ../compat/strlcpy.o"])

dnl  utimes do sprawdzania poczty
AC_CHECK_FUNCS(utimes)

dnl  mkstemp do zapisywania tokenów przy braku libjpeg
AC_CHECK_FUNCS(mkstemp)

dnl  strcoll() do sortowania zgodnie z localami
AC_CHECK_HEADERS(locale.h)
AC_CHECK_FUNCS(setlocale)
AC_CHECK_FUNCS(strcoll)

dnl  regexpy
AC_CHECK_HEADERS(regex.h)

dnl  execinfo
AC_CHECK_HEADERS(execinfo.h)

AC_CHECK_FUNCS(inet_pton)

AC_ARG_ENABLE(ui-readline,
	[  --enable-ui-readline    Enable readline UI])

AC_ARG_ENABLE(force-ncurses,
	[  --disable-force-ncurses Force use of ncurses UI])

AC_ARG_ENABLE(ui-ncurses,
	[  --disable-ui-ncurses    Disable ncurses UI])

if test "x$enable_ui_ncurses" != "xno"; then
	AC_DEFINE(WITH_UI_NCURSES, 1, [define if you want ui-ncurses])
	OBJS="$OBJS ui-ncurses.o"
	ui_ncurses_enabled=yes
	ui_ncurses_default=yes
fi

dnl 
dnl  Je¶li nie chcemy ncurses, budujemy readline.
dnl
  
if test "x$enable_ui_ncurses" = "xno" -a "x$enable_ui_readline" != "xno"; then
	enable_ui_readline=yes
fi

if test "x$enable_ui_readline" = "xyes"; then
	AC_DEFINE(WITH_UI_READLINE, 1, [define if you want ui-readline])
	OBJS="$OBJS ui-readline.o"
	ui_readline_enabled=yes
	ui_ncurses_default=no
	ui_readline_default=yes
fi
  
if test "x$enable_ui_readline" = "xyes" -a "x$enable_force_ncurses" = "xyes"; then 
	AC_DEFINE(WITH_FORCE_NCURSES, 1, [define if you want ui-ncurses as default])
	ui_ncurses_default=yes
	ui_readline_default=no
fi
  
if test "x$enable_ui_ncurses" != "xno"; then 
	AC_CHECK_NCURSES

	if test "x$have_ncurses" = "x"; then
		AC_MSG_ERROR([You need ncurses and ncurses-devel packages.])
	fi

	LDFLAGS="$LDFLAGS $CURSES_LIBS"
	CFLAGS="$CFLAGS $CURSES_INCLUDES"
	echo "CURSES_INCLUDES=$CURSES_INCLUDES"
fi

AC_ARG_WITH(termcap, 
	[  --without-termcap       Used to force ncurses for readline])

if test "x$enable_ui_readline" = "xyes"; then
	if test "x$with_termcap" = "xno"; then
		TERMCAP_LIB=""
	else
		AC_CHECK_LIB(termcap, tgetent, [TERMCAP_LIB="-ltermcap"])
		LDFLAGS="$LDFLAGS $TERMCAP_LIB"
	fi
		if test "x$TERMCAP_LIB" = "x" -a "x$CURSES_LIBS" = "x"; then
		AC_CHECK_NCURSES
		LDFLAGS="$LDFLAGS $CURSES_LIBS"
		CFLAGS="$CFLAGS $CURSES_INCLUDES"
	fi
     
	AC_CHECK_READLINE

	if test "x$READLINE_LIBS" = "x"; then
		AC_MSG_ERROR([You need both readline and readline-devel packages.])
	fi

	LDFLAGS="$READLINE_LIBS $LDFLAGS"
	CFLAGS="$CFLAGS $READLINE_INCLUDES"

	AC_CHECK_FUNCS([rl_set_prompt rl_filename_completion_function rl_get_screen_size rl_set_key rl_bind_key_in_map])
fi

dnl
dnl  Sprawdzamy libgsm.so, <gsm.h> i <linux/soundcard.h>
dnl
  
AC_ARG_WITH(libgsm,
	[  --without-libgsm        Compile without GSM support])

if test "x$with_libgsm" != "xno"; then
	AC_CHECK_LIB(gsm, gsm_decode,
	[ 
		AC_CHECK_HEADERS(gsm.h,
		[
			have_gsm_h=yes
		], [
			AC_CHECK_HEADERS(gsm/gsm.h,
			[
				have_gsm_h=yes
				CFLAGS="$CFLAGS -I/usr/include/gsm"
			])
		])
	])

	if test "x$have_gsm_h" = "xyes"; then
		AC_CHECK_HEADERS(linux/soundcard.h,
		[
			AC_DEFINE(HAVE_VOIP, 1, [define if you want VOIP support])
			LDFLAGS="-lgsm $LDFLAGS"
			OBJS="$OBJS voice.o"
		])
	fi
fi

dnl
dnl  Sprawdzamy libungif.so i <gif_lib.h>
dnl
  
AC_ARG_WITH(libungif,
	[  --without-libungif      Compile without GIF token support])

if test "x$with_libungif" != "xno"; then
	AC_CHECK_LIB(ungif, DGifSlurp,
	[ 
		AC_CHECK_HEADERS(gif_lib.h,
		[
			AC_DEFINE(HAVE_LIBUNGIF, 1, [define if you have libungif])
			LDFLAGS="-lungif $LDFLAGS"
			have_libungif=yes
		])
	])
fi

dnl
dnl  Sprawdzamy libjpeg.so i <jpeglib.h>
dnl
  
AC_ARG_WITH(libjpeg,
	[  --without-libjpeg       Compile without JPEG token support])

if test "x$with_libjpeg" != "xno"; then
	AC_CHECK_LIB(jpeg, jpeg_start_decompress,
	[ 
		AC_CHECK_HEADERS(jpeglib.h,
		[
			AC_DEFINE(HAVE_LIBJPEG, 1, [define if you have libjpeg])
			LDFLAGS="-ljpeg $LDFLAGS"
			have_libjpeg=yes
		])
	])
fi

dnl
dnl  Sprawdzamy Pythona
dnl
    
AC_CHECK_PYTHON
  
if test "x$have_python" = "xyes"; then
	OBJS="$OBJS python.o"
	LDFLAGS="$PYTHON_LIBS $LDFLAGS"
	CFLAGS="$CFLAGS $PYTHON_INCLUDES"
fi

dnl
dnl  Sprawdzamy libz.so, <zlib.h>
dnl
  
AC_ARG_WITH(zlib,
	[  --without-zlib          Compile without zlib (compressed logs)])

if test "x$with_zlib" != "xno"; then
	AC_CHECK_LIB(z, gzopen,
	[
		AC_CHECK_HEADERS(zlib.h,
		[
			AC_DEFINE(HAVE_ZLIB, 1, [define if you want compressed logs])
			LDFLAGS="-lz $LDFLAGS"
			have_zlib=yes
		])
	])
fi

dnl
dnl  Sprawdzamy, czy u¿ytkownik chce RTG
dnl

AC_ARG_ENABLE(wap,
	[  --enable-wap            Compile WAP gateway])

	if test "x$enable_wap" = "xyes"; then
		if test -d ekgwap; then
			make_ekgwap="make-ekgwap"
			install_ekgwap="install-ekgwap"
			AC_DEFINE(WITH_WAP, 1, [define if you want WAP support])
		else
			AC_MSG_ERROR([You have to download RTG source code from http://www.comm.pl/~serek/ekgwap/])
	fi
fi


dnl
dnl  Sprawdzamy, czy u¿ytkownik chce aspell
dnl

AC_ARG_ENABLE(aspell,
	[  --enable-aspell         Enable aspell support])

	if test "x$enable_aspell" = "xyes"; then 
	AC_CHECK_HEADERS(aspell.h,
	[
		have_aspell_includes=yes
	])
	if test "x$have_aspell_includes" = "xyes"; then
	    AC_CHECK_LIB(aspell, new_aspell_config,
	    [
		have_aspell_libs=yes
	    ])
 	    if test "x$have_aspell_libs" = "xyes"; then
		if test "x$ui_ncurses_default" = "xyes"; then    
 		    AC_DEFINE(WITH_ASPELL, 1, [define if you want aspell support])
 		    LDFLAGS="$LDFLAGS -laspell"		
		fi
	    else 
	        enable_aspell=no
	    fi
	else 
	    enable_aspell=no
	fi
fi

dnl
dnl  Sprawdzamy ioctld
dnl

AC_ARG_ENABLE(ioctld,
	[  --enable-ioctld         Compile ioctld])

if test "x$enable_ioctld" = "xyes"; then 
	AC_CHECK_HEADERS(linux/kd.h,
	[
		have_ioctld_includes=yes
	], [
		AC_CHECK_HEADERS(sys/kbio.h,
		[
			have_ioctld_includes=yes
		])
	])

	if test "x$have_ioctld_includes" = "xyes"; then
		CFLAGS="$CFLAGS -DWITH_IOCTLD -DIOCTLD_PATH=\\\"${libexecdir}/ioctld\\\""
		ioctld="ioctld"
		install_ioctld="install-ioctld"
	fi
fi

dnl
dnl  Wszystkie testy nale¿y dodawaæ POWY¯EJ testu ioctld, poniewa¿ w przypadku
dnl  jego powodzenia zawarto¶æ CFLAGS skutecznie blokuje dzia³anie gcc
dnl  odpalanego przez ./configure
dnl

if test "x$enable_static" = "xno" -o "x$enable_dynamic" = "xyes"; then 
	lib_shared_default=yes
	lib_static_default=no
	lgadu="-lgadu"
else
	libgadu_a="../lib/libgadu.a"
	lib_shared_default=no
	lib_static_default=yes
fi
ekg="ekg"
install_ekg="install-ekg"
clean_ekg="clean-ekg"
distclean_ekg="distclean-ekg"
uninstall_ekg="uninstall-ekg"
dep_ekg="dep-ekg"

AC_CONFIG_FILES(src/Makefile)

dnl </ekg>

AC_CONFIG_FILES(Makefile lib/Makefile examples/Makefile lib/libgadu.pc)

AC_OUTPUT

echo
echo "configured options:"

if test "x$lib_static_enabled" = "xyes"; then
	if test "x$lib_static_default" = "xyes"; then
		echo " - static libgadu: enabled (default)"
	else
		echo " - static libgadu: enabled"
	fi
else
	echo " - static libgadu: disabled"
fi

if test "x$lib_shared_enabled" = "xyes"; then
	if test "x$lib_shared_default" = "xyes"; then
		echo " - shared libgadu: enabled (default)"
	else
		echo " - shared libgadu: enabled"
	fi
else
	echo " - shared libgadu: disabled"
fi

if test "x$enable_libgadu_openssl" != "xno"; then
	echo " - libgadu_openssl: enabled"
else
	echo " - libgadu_openssl: disabled"
fi

dnl <ekg>

if test "x$have_openssl" = "xyes"; then
	echo " - openssl: enabled"
else
	echo " - openssl: disabled"
fi

if test "x$have_ioctld_includes" = "xyes"; then
	echo " - ioctld: enabled"
else
	echo " - ioctld: disabled"
fi

if test "x$have_python" = "xyes"; then
	echo " - python: enabled"
else
	echo " - python: disabled"
fi

if test "x$have_zlib" = "xyes"; then
	echo " - zlib: enabled"
else
	echo " - zlib: disabled"
fi

if test "x$have_pthread" = "xyes"; then
	echo " - pthread: enabled"
else
	echo " - pthread: disabled"
fi

if test "x$have_libungif" = "xyes"; then
	echo " - libungif: enabled"
else
	echo " - libungif: disabled"
fi

if test "x$have_libjpeg" = "xyes"; then
	echo " - libjpeg: enabled"
else
	echo " - libjpeg: disabled"
fi

if test "x$ui_readline_enabled" = "xyes"; then
	if test "x$ui_readline_default" = "xyes"; then
		echo " - ui-readline: enabled (default)"
	else
		echo " - ui-readline: enabled"
	fi
else
	echo " - ui-readline: disabled"
fi

if test "x$ui_ncurses_enabled" = "xyes"; then
	if test "x$ui_ncurses_default" = "xyes"; then
		echo " - ui-ncurses: enabled (default)"
	else
		echo " - ui-ncurses: enabled"
	fi
else
	echo " - ui-ncurses: disabled"
fi

if test "x$enable_wap" = "xyes"; then
	echo " - rtg: enabled"
fi

if test "x$enable_aspell" = "xyes"; then
	if test "x$ui_ncurses_default" = "xyes"; then    
		echo " - aspell: enabled"
	else 
		echo " - aspell: wanted, but it's not avaiable without ncurses"
	fi
else
	echo " - aspell: disabled"
fi

echo

dnl </ekg>
